#include "../olympics24a2.h"
#include <cassert>
#include <iostream>

int main() {
    olympics_t o;

	assert(StatusType::SUCCESS == o.add_team(39));
	assert(StatusType::SUCCESS == o.add_player(39, 4715));
	assert(StatusType::SUCCESS == o.add_player(39, 644));
	assert(StatusType::SUCCESS == o.add_team(194));
	assert(StatusType::SUCCESS == o.add_team(69));
	assert(StatusType::SUCCESS == o.add_player(39, 2671));
	assert(StatusType::SUCCESS == o.add_player(69, 7945));
	assert(StatusType::SUCCESS == o.add_player(39, 7093));
	assert(StatusType::SUCCESS == o.add_team(199));
	assert(StatusType::SUCCESS == o.add_player(69, 3364));
	assert(StatusType::SUCCESS == o.add_player(69, 9662));
	assert(StatusType::SUCCESS == o.add_team(46));
	assert(StatusType::SUCCESS == o.add_team(104));
	assert(StatusType::SUCCESS == o.add_player(194, 9916));
	assert(StatusType::SUCCESS == o.add_player(46, 8157));
	assert(StatusType::SUCCESS == o.add_player(194, 7613));
	assert(StatusType::SUCCESS == o.add_team(153));
	assert(StatusType::SUCCESS == o.add_player(194, 1469));
	assert(StatusType::SUCCESS == o.add_player(194, 506));
	assert(StatusType::SUCCESS == o.add_team(67));
	assert(StatusType::SUCCESS == o.add_player(153, 221));
	assert(StatusType::SUCCESS == o.add_player(104, 9767));
	assert(StatusType::SUCCESS == o.add_player(104, 3153));
	assert(StatusType::SUCCESS == o.add_player(39, 4817));
	assert(StatusType::SUCCESS == o.add_team(74));
	assert(StatusType::SUCCESS == o.add_team(15));

    assert(30452 == o.get_highest_ranked_team().ans());
    assert(194 == o.play_match(153, 194).ans());
    assert(StatusType::FAILURE == o.unite_teams(193, 199));
    assert(39 == o.play_match(104, 39).ans());
    assert(69 == o.play_match(69, 153).ans());
    assert(StatusType::SUCCESS == o.unite_teams(46, 74));
    assert(StatusType::SUCCESS == o.add_player(39, 1868));
    assert(1 == o.num_wins_for_team(39).ans());
    assert(StatusType::SUCCESS == o.remove_newest_player(104));
    assert(StatusType::SUCCESS == o.add_team(24));
    assert(StatusType::SUCCESS == o.add_player(104, 1367));
    assert(StatusType::FAILURE == o.num_wins_for_team(127).status());
    assert(0 == o.num_wins_for_team(24).ans());
    assert(StatusType::FAILURE == o.remove_team(61));
    assert(StatusType::SUCCESS == o.unite_teams(67, 39));
    assert(67 == o.play_tournament(20856, 28858).ans());
    assert(StatusType::FAILURE == o.unite_teams(113, 24));
    assert(StatusType::SUCCESS == o.unite_teams(67, 69));
    assert(StatusType::FAILURE == o.play_tournament(49, 69).status());
    assert(StatusType::FAILURE == o.remove_newest_player(101));
    assert(StatusType::SUCCESS == o.remove_newest_player(194));
    assert(StatusType::FAILURE == o.add_player(93, 201));
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.remove_team(153));
    assert(StatusType::FAILURE == o.num_wins_for_team(107).status());
    assert(StatusType::SUCCESS == o.add_player(199, 7608));
    assert(StatusType::FAILURE == o.remove_team(93));
    assert(StatusType::SUCCESS == o.remove_team(46));
    assert(StatusType::FAILURE == o.num_wins_for_team(174).status());
    assert(194 == o.play_tournament(8054, 25116).ans());
    assert(194 == o.play_tournament(8881, 41283).ans());
    assert(StatusType::FAILURE == o.add_player(44, 9567));
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(StatusType::FAILURE == o.play_tournament(117, 252).status());
    assert(StatusType::SUCCESS == o.unite_teams(104, 24));
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.add_team(169));
    assert(3 == o.num_wins_for_team(194).ans());
    assert(StatusType::FAILURE == o.remove_newest_player(169));
    assert(StatusType::FAILURE == o.play_match(5, 12).status());
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(StatusType::INVALID_INPUT == o.remove_team(-18));
    assert(StatusType::INVALID_INPUT == o.add_player(-7, 7146));
    assert(StatusType::FAILURE == o.play_tournament(191, 207).status());
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.add_team(183));
    assert(StatusType::FAILURE == o.unite_teams(152, 165));
    assert(StatusType::SUCCESS == o.add_player(104, 9480));
    assert(StatusType::SUCCESS == o.remove_team(169));
    assert(StatusType::SUCCESS == o.remove_team(104));
    assert(42436 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.add_team(187));
    assert(67 == o.play_match(194, 67).ans());
    assert(StatusType::SUCCESS == o.unite_teams(183, 187));
    assert(StatusType::SUCCESS == o.remove_team(194));
    assert(StatusType::SUCCESS == o.add_player(67, 1431));
    assert(StatusType::FAILURE == o.add_player(6, 1507));
    assert(StatusType::FAILURE == o.add_player(184, 4791));
    assert(StatusType::FAILURE == o.unite_teams(183, 81));
    assert(StatusType::SUCCESS == o.unite_teams(183, 67));
    assert(StatusType::SUCCESS == o.remove_team(15));
    assert(183 == o.play_tournament(397, 534175462).ans());
    assert(0 == o.num_wins_for_team(199).ans());
    assert(47151 == o.get_highest_ranked_team().ans());
    assert(47151 == o.get_highest_ranked_team().ans());
    assert(183 == o.play_tournament(1514, 339495265).ans());
    assert(StatusType::SUCCESS == o.remove_newest_player(183));
    assert(42437 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.add_player(199, 3488));
    assert(StatusType::SUCCESS == o.remove_newest_player(199));
    assert(StatusType::SUCCESS == o.add_player(183, 5278));
    assert(183 == o.play_tournament(5987, 151233040).ans());
    assert(42437 == o.play_match(183, 199).ans());
    assert(StatusType::SUCCESS == o.add_player(183, 1867));
    assert(StatusType::FAILURE == o.add_player(104, 5987));
    assert(0 == o.num_wins_for_team(199).ans());
    assert(StatusType::SUCCESS == o.remove_team(199));
    assert(StatusType::FAILURE == o.remove_team(21));
    assert(StatusType::SUCCESS == o.remove_newest_player(183));
    assert(StatusType::SUCCESS == o.remove_team(183));
    assert(StatusType::FAILURE == o.play_tournament(172, 342).status());
    assert(StatusType::FAILURE == o.play_tournament(197, 313).status());
    assert(StatusType::INVALID_INPUT == o.remove_newest_player(-6));
    assert(StatusType::SUCCESS == o.add_team(84));
    assert(StatusType::SUCCESS == o.add_team(37));
    assert(StatusType::FAILURE == o.num_wins_for_team(199).status());
    assert(StatusType::INVALID_INPUT == o.remove_newest_player(-20));
    assert(0 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.remove_team(84));
    assert(0 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.remove_team(37));
    assert(StatusType::INVALID_INPUT == o.add_player(-15, -18));
    assert(StatusType::INVALID_INPUT == o.play_match(157, -4).status());
    assert(StatusType::SUCCESS == o.add_team(200));
    assert(StatusType::FAILURE == o.add_player(66, 9322));
    assert(StatusType::FAILURE == o.unite_teams(181, 200));
    assert(0 == o.num_wins_for_team(200).ans());
    assert(StatusType::FAILURE == o.play_tournament(36, 200).status());
    assert(StatusType::SUCCESS == o.add_player(200, 1177));
    assert(StatusType::FAILURE == o.num_wins_for_team(174).status());
    assert(StatusType::SUCCESS == o.add_player(200, 4379));
    assert(StatusType::FAILURE == o.add_player(20, 4530));
    assert(StatusType::SUCCESS == o.add_team(115));
    assert(StatusType::FAILURE == o.unite_teams(102, 115));
    assert(StatusType::FAILURE == o.play_tournament(138, 233).status());
    assert(StatusType::INVALID_INPUT == o.add_player(-20, -9));
    assert(StatusType::FAILURE == o.add_player(24, 8526));
    assert(8758 == o.get_highest_ranked_team().ans());
    assert(StatusType::FAILURE == o.add_team(200));
    assert(StatusType::FAILURE == o.play_tournament(158, 293).status());
    assert(StatusType::SUCCESS == o.remove_newest_player(200));
    assert(StatusType::FAILURE == o.unite_teams(87, 115));
    assert(StatusType::INVALID_INPUT == o.play_match(-5, 37).status());
    assert(StatusType::SUCCESS == o.remove_newest_player(200));
    assert(0 == o.get_highest_ranked_team().ans());
    assert(StatusType::FAILURE == o.num_wins_for_team(30).status());
    assert(StatusType::SUCCESS == o.remove_team(200));
    assert(StatusType::FAILURE == o.unite_teams(198, 146));
    assert(StatusType::FAILURE == o.num_wins_for_team(88).status());
    assert(StatusType::FAILURE == o.unite_teams(58, 115));
    assert(StatusType::FAILURE == o.num_wins_for_team(48).status());
    assert(StatusType::SUCCESS == o.remove_team(115));
    assert(StatusType::FAILURE == o.num_wins_for_team(54).status());
    assert(StatusType::FAILURE == o.remove_team(21));
    assert(StatusType::FAILURE == o.unite_teams(116, 182));
    assert(StatusType::FAILURE == o.remove_team(82));
    assert(StatusType::INVALID_INPUT == o.play_match(1, -4).status());
    assert(StatusType::SUCCESS == o.add_team(80));
    assert(0 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.add_player(80, 5907));
    assert(StatusType::FAILURE == o.unite_teams(160, 80));
    assert(StatusType::INVALID_INPUT == o.play_match(-11, 1).status());
    assert(StatusType::SUCCESS == o.add_player(80, 8074));
    assert(StatusType::FAILURE == o.unite_teams(80, 119));
    assert(StatusType::SUCCESS == o.remove_team(80));
    assert(-1 == o.get_highest_ranked_team().ans());
    assert(StatusType::SUCCESS == o.add_team(92));
    assert(StatusType::FAILURE == o.play_tournament(184, 222).status());
    assert(0 == o.get_highest_ranked_team().ans());
    assert(StatusType::INVALID_INPUT == o.unite_teams(53, 53));
    assert(StatusType::FAILURE == o.add_team(92));
    assert(StatusType::SUCCESS == o.add_team(15));
    assert(StatusType::FAILURE == o.remove_team(48));
    assert(StatusType::FAILURE == o.remove_newest_player(15));
    assert(StatusType::FAILURE == o.play_match(83, 15).status());
    assert(StatusType::FAILURE == o.play_match(92, 15).status());
    assert(StatusType::SUCCESS == o.add_player(15, 9440));
    assert(StatusType::FAILURE == o.play_tournament(95, 234).status());
    assert(StatusType::INVALID_INPUT == o.play_match(-2, -2).status());
    assert(StatusType::INVALID_INPUT == o.play_match(28, -12).status());
    assert(StatusType::SUCCESS == o.remove_newest_player(15));
    assert(StatusType::INVALID_INPUT == o.play_match(110, 110).status());
    assert(StatusType::INVALID_INPUT == o.play_match(51, 51).status());
    assert(0 == o.get_highest_ranked_team().ans());
    assert(0 == o.get_highest_ranked_team().ans());
    assert(StatusType::FAILURE == o.num_wins_for_team(59).status());
    assert(StatusType::FAILURE == o.play_match(15, 92).status());
    assert(StatusType::INVALID_INPUT == o.remove_newest_player(-6));
    assert(StatusType::INVALID_INPUT == o.remove_newest_player(-18));
    assert(StatusType::FAILURE == o.remove_newest_player(63));
    assert(StatusType::FAILURE == o.unite_teams(30, 157));
    assert(StatusType::INVALID_INPUT == o.add_player(-10, -8));
    assert(StatusType::INVALID_INPUT == o.play_match(-11, 174).status());
    assert(StatusType::INVALID_INPUT == o.play_tournament(-11, -17).status());
    assert(StatusType::INVALID_INPUT == o.play_tournament(8601, -15).status());
    assert(StatusType::SUCCESS == o.add_team(51));
    assert(StatusType::INVALID_INPUT == o.play_tournament(7908, 1745).status());
    assert(StatusType::INVALID_INPUT == o.add_team(-1));
    assert(StatusType::SUCCESS == o.remove_team(92));
    assert(StatusType::FAILURE == o.play_tournament(80, 85).status());
    assert(StatusType::INVALID_INPUT == o.num_wins_for_team(-20).status());
    assert(StatusType::INVALID_INPUT == o.play_tournament(3116, -4).status());


    std::cout << "test1 passed" << std::endl;

    return 0;
}
